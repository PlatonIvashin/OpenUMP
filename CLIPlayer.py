import urwid
import vlc
import os
import sys
import random

class AudioPlayer:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ —á–µ—Ä–µ–∑ VLC"""
    def __init__(self):
        self.instance = vlc.Instance()
        self.player = self.instance.media_player_new()
        self.current_file = None
        self.paused = False
        self.volume = 50  # –ì—Ä–æ–º–∫–æ—Å—Ç—å –æ—Ç 0 –¥–æ 100
        self.repeat = False
        self.shuffle = False
        self.playlist = []
        self.current_index = 0

    def load(self, filename):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞"""
        try:
            media = self.instance.media_new(filename)
            self.player.set_media(media)
            self.current_file = filename
            self.player.audio_set_volume(self.volume)
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return False

    def play(self):
        """–ù–∞—á–∞—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
        if self.player.get_media():
            self.player.play()
            self.paused = False

    def pause(self):
        """–ü–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É"""
        if self.player.is_playing():
            self.player.pause()
            self.paused = True

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
        self.player.stop()
        self.paused = False

    def is_playing(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        return self.player.is_playing()

    def set_volume(self, volume):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (0-100)"""
        self.volume = max(0, min(100, volume))
        self.player.audio_set_volume(self.volume)

    def seek(self, seconds):
        """–ü–µ—Ä–µ–º–æ—Ç–∫–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)"""
        if self.player.get_media():
            current_time = self.player.get_time() // 1000  # –º—Å -> —Å–µ–∫
            self.player.set_time((current_time + seconds) * 1000)

    def toggle_repeat(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–∞"""
        self.repeat = not self.repeat

    def toggle_shuffle(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ—à–∫–∏"""
        self.shuffle = not self.shuffle
        if self.shuffle:
            random.shuffle(self.playlist)
        else:
            self.playlist.sort()

    def next_track(self):
        """–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"""
        if self.playlist:
            self.current_index = (self.current_index + 1) % len(self.playlist)
            self.load(self.playlist[self.current_index])
            self.play()

    def previous_track(self):
        """–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫"""
        if self.playlist:
            self.current_index = (self.current_index - 1) % len(self.playlist)
            self.load(self.playlist[self.current_index])
            self.play()

def get_audio_files(directory):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç M4A, MP3 –∏ –¥—Ä.)"""
    extensions = ('.mp3', '.wav', '.flac', '.m4a', '.aac')
    return [
        os.path.join(directory, f) 
        for f in os.listdir(directory) 
        if f.lower().endswith(extensions) and os.path.isfile(os.path.join(directory, f))
    ]

class AudioPlayerUI:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    palette = [
        ('header', 'white', 'dark blue'),
        ('body', 'light gray', 'black'),
        ('button', 'black', 'light gray'),
        ('focus', 'white', 'dark red'),
    ]

    def __init__(self, directory='.'):
        self.directory = directory
        self.player = AudioPlayer()
        self.player.playlist = get_audio_files(self.directory)
        self.create_widgets()
        self.update_status()

    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        self.file_list = urwid.ListBox(
            urwid.SimpleFocusListWalker([
                urwid.AttrMap(
                    urwid.Button(f, self.on_file_select),
                    None, 'focus'
                ) for f in os.listdir(self.directory) 
                if f.lower().endswith(('.mp3', '.wav', '.flac', '.m4a', '.aac'))
            ])
        )

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.play_btn = urwid.Button('‚ñ∂/‚è∏', self.on_play_pause)
        self.stop_btn = urwid.Button('‚èπ', self.on_stop)
        self.repeat_btn = urwid.Button('üîÅ: –í—ã–∫–ª', self.on_repeat)
        self.shuffle_btn = urwid.Button('üîÄ: –í—ã–∫–ª', self.on_shuffle)
        self.vol_up_btn = urwid.Button('üîä+', self.on_volume_up)
        self.vol_down_btn = urwid.Button('üîâ-', self.on_volume_down)
        
        controls = urwid.Columns([
            urwid.AttrMap(self.play_btn, 'button', 'focus'),
            urwid.AttrMap(self.stop_btn, 'button', 'focus'),
            urwid.AttrMap(self.repeat_btn, 'button', 'focus'),
            urwid.AttrMap(self.shuffle_btn, 'button', 'focus'),
            urwid.AttrMap(self.vol_up_btn, 'button', 'focus'),
            urwid.AttrMap(self.vol_down_btn, 'button', 'focus'),
        ])

        # –°—Ç–∞—Ç—É—Å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
        self.status = urwid.Text(('header', " –°—Ç–∞—Ç—É—Å: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ | –ì—Ä–æ–º–∫–æ—Å—Ç—å: 50% "), align='center')

        # –û—Å–Ω–æ–≤–Ω–æ–π –º–∞–∫–µ—Ç
        self.layout = urwid.Frame(
            header=urwid.AttrMap(urwid.Text(f"–ê—É–¥–∏–æ–ø–ª–µ–µ—Ä OpenUMP 2.0 | –ü–∞–ø–∫–∞: {self.directory}", align='center'), 'header'),
            body=urwid.AttrMap(self.file_list, 'body'),
            footer=urwid.Pile([
                controls,
                urwid.Divider(),
                self.status
            ])
        )

    def update_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        status = []
        if self.player.paused:
            status.append("‚è∏ –ü–∞—É–∑–∞")
        elif self.player.is_playing():
            status.append("‚ñ∂ –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ")
        else:
            status.append("‚èπ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        if self.player.current_file:
            status.append(f"üìÅ: {os.path.basename(self.player.current_file)}")
        
        status.append(f"üîä: {self.player.volume}%")
        self.status.set_text(('header', " | ".join(status)))

    def on_file_select(self, button):
        """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞"""
        filename = os.path.join(self.directory, button.label)
        if self.player.load(filename):
            self.player.play()
            self.update_status()

    def on_play_pause(self, button):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º"""
        if self.player.current_file:
            if self.player.paused or not self.player.is_playing():
                self.player.play()
            else:
                self.player.pause()
            self.update_status()

    def on_stop(self, button):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞"""
        self.player.stop()
        self.update_status()

    def on_repeat(self, button):
        """–ü–æ–≤—Ç–æ—Ä"""
        self.player.toggle_repeat()
        self.repeat_btn.set_label(f"üîÅ: {'–í–∫–ª' if self.player.repeat else '–í—ã–∫–ª'}")

    def on_shuffle(self, button):
        """–ü–µ—Ä–µ–º–µ—à–∫–∞"""
        self.player.toggle_shuffle()
        self.shuffle_btn.set_label(f"üîÄ: {'–í–∫–ª' if self.player.shuffle else '–í—ã–∫–ª'}")

    def on_volume_up(self, button):
        """–£–≤–µ–ª–∏—á–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å"""
        self.player.set_volume(self.player.volume + 10)
        self.update_status()

    def on_volume_down(self, button):
        """–£–º–µ–Ω—å—à–∏—Ç—å –≥—Ä–æ–º–∫–æ—Å—Ç—å"""
        self.player.set_volume(self.player.volume - 10)
        self.update_status()

    def run(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        loop = urwid.MainLoop(
            self.layout,
            self.palette,
            unhandled_input=self.handle_input
        )
        loop.run()

    def handle_input(self, key):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à"""
        if key in ('q', 'Q'):
            raise urwid.ExitMainLoop()
        elif key in ('p', 'P'):
            self.on_play_pause(None)
        elif key in ('s', 'S'):
            self.on_stop(None)
        elif key == 'left':
            self.player.seek(-10)
        elif key == 'right':
            self.player.seek(10)
        elif key == '+':
            self.on_volume_up(None)
        elif key == '-':
            self.on_volume_down(None)

if __name__ == "__main__":
    directory = sys.argv[1] if len(sys.argv) > 1 else '.'
    if not os.path.isdir(directory):
        print(f"–û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ '{directory}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        sys.exit(1)
    
    AudioPlayerUI(directory).run()